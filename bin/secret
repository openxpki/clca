#!/usr/bin/env perl
#
# Command line tool wrapper for OpenXPKI Secret Sharing 
# 2013-12-04 Martin Bartosch <m.bartosch@cynops.de>
#

# Stub implementation for OpenXPKI Crypto Token (only random numbers and prime tests required)
package DummyToken;
use strict;
use warnings;

sub new {
    my $self = {};
    bless $self;
    
    return $self;
}

sub command {
    my $self = shift;
    my $arg = shift;

    if ($arg->{COMMAND} eq 'create_random') {
        my $len = $arg->{RANDOM_LENGTH};
        my $rand = `openssl rand -base64 $len`;
	if ($? != 0) {
	    die "ERROR: could not run openssl";
	}
        chomp $rand;
        if (length($rand) < $len) {
            die "Error: could not create random value. Stopped";
        }
        return $rand;
    }

    if ($arg->{COMMAND} eq 'is_prime') {
        my $result = `openssl prime -hex $arg->{PRIME}`;
	chomp $result;
	if ($? != 0) {
	    die "ERROR: could not run openssl";
	}
	if ($result =~ m{ is\ not\ prime \z}xms) {
	    return;
	} elsif ($result =~ m{ is\ prime \z}xms) {
	    return 1;
	} else {
	    die "ERROR: invalid prime test result $result returned from openssl";
	}
    }
    die "token command " . $arg->{COMMAND} . " not implemented";
}



package main;

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/../lib";

use Getopt::Long;
use Pod::Usage;
use OpenXPKI::Crypto::Secret;
use Data::Dumper;
use Term::ReadKey;

use English;

my $k = 2;
my $n = 3;
my $bitlength = 128;
my $help;
my $man;
my $batch;

GetOptions(
    'help' => \$help,
    'man' => \$man,
    'k=i' => \$k,
    'n=i' => \$n,
    'bitlength=i' => \$bitlength,
    'batch' => \$batch,
    )
    or pod2usage(-verbose => 0);

pod2usage(-exitstatus => 0, -verbose => 2) if ($man);
pod2usage(-verbose => 1)                   if ($help);


my $secret = OpenXPKI::Crypto::Secret->new(
    {
	TYPE => 'Split',
	QUORUM => {
	    N => $n,
	    K => $k,
	},
	TOKEN => DummyToken->new(),
    });

if (! $secret) {
    die "Could not instantiate secret. Stopped";
}

my $cmd = shift || exit 0;

if ($cmd eq 'generate') {
    my @shares = $secret->compute({ BITLENGTH => $bitlength });
    my $secret = $secret->get_secret();

    if ($batch) {
	print "K=$k\n";
	print "N=$n\n";
	print "PASSPHRASE=$secret\n";
	
	for (my $ii = 0; $ii < scalar @shares; $ii++) {
	    print "SHARE[$ii]=$shares[$ii]\n";
	}
    } else {
	print STDERR "Creating shared secret of $bitlength random bits with ($k/$n) quorum.\n\n";
	print STDERR "This program will first print the $n shares to STDERR, clearing the screen\n";
	print STDERR "with 200 newlines after each step.\n";
	print STDERR "After providing the shares the program will print the $bitlength bit phrase\n";
	print STDERR "to STDOUT.\n\n";

	print STDERR "Hit ENTER now to display the first share.\n";
	my $tmp = <>;
	for (my $ii = 0; $ii < $n; $ii++) {
	    print STDERR "Share holder #" . ($ii + 1) . ", this is your share:\n";
	    print STDERR $shares[$ii] . "\n\n";
	    print STDERR "Copy the share and hit ENTER to clear the screen.\n";
	    print STDERR "(NOTE: no sensitive data will be displayed immediately after the key press.)\n";
	    $tmp = <>;
	    for (my $jj = 0; $jj < 200; $jj++) {
		print STDERR "\n";
	    }
	    print STDERR "Share #" . ($ii + 1) . " has just been displayed.\n";
	    print STDERR "Hit ENTER to continue\n\n";
	    $tmp = <>;
	}
	print "PASSPHRASE=$secret\n";
    }

} elsif ($cmd eq 'get') {
    while (! $secret->is_complete()) {
	if (! $batch) {
	    for (my $ii = 0; $ii < 200; $ii++) {
		print STDERR "\n";
	    }
	    print STDERR "Please enter share: ";
	}
	ReadMode('noecho');
	my $line = <>;
	ReadMode('normal');
	chomp $line;
	$line = uc($line);
	eval {
	    $secret->set_secret($line);
	};
	if ($EVAL_ERROR) {
	    print STDERR "ERROR: invalid share entered, repeat please\n";
	    if (! $batch) {
		sleep 2;
	    }
	}
    }
    print "PASSPHRASE=" . $secret->get_secret() . "\n";

} else {
    print STDERR "ERROR: invalid command '$cmd'\n";
    exit 1;
}

__END__

=head1 NAME

secret - Secret Splitting

=head1 USAGE

secret [OPTIONS] [get|generate]

=head1 DESCRIPTION

=head1 OPTIONS

=over 8

=item B<--k>

Quorum value K. Default: 2
K shares out of N are required to reconstruct the secret.

=item B<--n>

Quorum value N. Default: 3
K shares out of N are required to reconstruct the secret.

=item B<--batch>

Batch mode, does not print instructions for humans, instead only outputs the necessary
information.

=item B<--help>

Display a short help summary.

=item B<--man>

Display full manual page.

=back

=head1 COMMANDS

=over 8

=item B<generate>

This command generates a random number (default: 128 bit), performs the actual secret 
splitting, generates and prints the secret parts. The output in batch mode has the format

  SECRET=....
  SHARE[0]=....
  SHARE[1]=....

A useful way to hide the output and to provide the data for later processing (e. g. during a key
ceremony) is to invoke the script via eval `...`:

eval `./bin/secret generate --k 3 --n 5 --batch`

After executing ths command you can access the values as shell variables.

In interactive mode (default) some verbose instructions are printed to STDERR, the final SECRET=...
is still printed to STOUT. This makes it possible to assign the secret value to a variable and
continue processing from there:

  PASSPHRASE=`./bin/secret generate  --k 3 --n 5` openssl genrsa -aes256 -passout env:PASSPHRASE -out key.pem 2048


=item B<get>

After reading the necessary components of the secret this command outputs the reconstructed secret to STDOUT.
Make sure to specify the same --k and --n parameters as during generation of shared secrets.

In --batch mode the script reads --k lines from STDIN without printing any information.

=back

=head1 EXAMPLES

