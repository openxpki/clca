#
# CA configuration
#

# derived paths
CADBDIR=$CA_HOME/ca
CACERT=$CADBDIR/cacert.pem
CAPRIVDIR=$CA_HOME/private
CERTDIR=$CA_HOME/certs
CRLDIR=$CA_HOME/crl

# optional: backup directory


# Define crypto engine to use. Supported values are
# openssl   - OpenSSL software only (private keys stored on disk)
# chil      - nCipher hardware
# gem       - Gemalto Safenet Luna SA hardware
#ENGINE=chil
#ENGINE=gem
ENGINE=openssl

# optional wrapper command for HSM integration into OpenSSL;
# this wrapper is called with the OpenSSL command line invocation
# as argument for private key operations (use with nFast modules)
#HSM_PRELOAD=/opt/nfast/bin/preload

# Path to OpenSSL binary
OPENSSL=/usr/bin/openssl


######################################################################
# Path to OpenSSL configuration
CNF=$CA_HOME/etc/openssl.cnf


######################################################################
# HSM settings
#NFAST_HOME=/opt/nfast

# Filename of the CA key
# if HSM protected keys are used this may also be the key ident
ROOTKEYNAME=cakey.pem

# Default settings for genkey subcommand
# Public key algorithm (rsa, ec)
DEFAULT_PUBKEY_ALGORITHM=rsa
# RSA key size (bits)
DEFAULT_RSA_KEYSIZE=3072
# EC curve name (see openssl ecparam -list_curves)
DEFAULT_EC_CURVE=prime256v1
# Private key encryption algorithm
DEFAULT_ENC_ALGORITHM=aes256

# By default the CA passphrase is read by the built-in function 
# get_passphrase
# from the terminal.
# In certain cases, e. g. when using a HSM or a software key using a 
# Secret Sharing scheme it is necessary to override this default behviour.
# To do so, define a shell function get_passphrase() that echoes the passphrase.
# example for a static passphrase:
# get_passphrase() {
#    echo "1234"
# }
#
# You can call an external program, e. g. to use Secret Sharing for
# the CA passphrase:
# get_passphrase() {
#    eval `secret get --n 3 --k 2`
#    echo $PASSPHRASE
# }

# Custom functions
# It is possible to extend clca with custom functions which are defined in this 
# configuration file. In order to support a new command FUNCTION, define the following
# bash function in this file:
# custom_FUNCTION
#
# The custom_FUNCTION will receive all command line arguments as passed to clca.
# The function should expect to be called with the argument --help and print out a help
# text to STDEOUT.
# The function should also expect to be called with the argument --shorthelp and print out
# a terse description of the function's purpose.
#
#custom_foo() {
#    while [ -n "$1" ] ; do
#        case "$1" in
#            --shorthelp)
#                echo "Custom function short description"
#                return 0
#                ;;
#            --help)
#                cat <<EOF
#Usage: clca foo [--bar blurb]
#
#To do foo you need bar.
#EOF
#            return 0
#            ;;
#            *)
#            custom_foo --help
#            return 0      	    
#            ;;
#        esac
#    done
#}

######################################################################
# CA settings

# Default CA validity in days (unless specified via --startdate and --enddate)
CA_VALIDITY=3650

# Randomize certificate serial numbers (default: off)
RANDOMIZE_SERIAL=1

# do not ask for confirmation when issuing certificates
BATCH=1
